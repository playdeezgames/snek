local BOARD_URL = "#board"
local SNAKE_LAYER = "snake"
local STATS_LAYER = "stats"
local BGM_URL = "#bgm"
local TURN_URL = "#turn"
local CHOMP_URL = "#chomp"
local DEATH_URL = "#death"
local BOARD_COLUMNS = 40
local BOARD_ROWS = 30
local DIRECTION_NORTH = 1
local DIRECTION_EAST = 2
local DIRECTION_SOUTH = 3
local DIRECTION_WEST = 4
local INITIAL_LENGTH = 4
local INITIAL_MOVETIMER = 0.1
local INITIAL_PELLETTIMER = 10

local score = 0
local highScore = 0
local snakeLength = 0
local moveTimer = 0
local pelletTimer = 0
local inPlay = false
local direction = DIRECTION_SOUTH
local snake = {{x = math.floor(BOARD_COLUMNS/2), y=math.floor(BOARD_ROWS/2), pellet=false, flags=0}}
local pellets = {}
local commandQueue = {}
local opposite = {DIRECTION_SOUTH, DIRECTION_WEST, DIRECTION_NORTH, DIRECTION_EAST}
local deltaX = {0,1,0,-1}
local deltaY = {1,0,-1,0}
local flags = {1,2,4,8}

function clearBoard()
	for x = 1, BOARD_COLUMNS do
		for y = 1, BOARD_ROWS do
			tilemap.set_tile(BOARD_URL, SNAKE_LAYER, x, y, 0)
			tilemap.set_tile(BOARD_URL, STATS_LAYER, x, y, 0)
		end
	end
end

function addPellet()
	local done = false
	local x
	local y
	while not done do
		x = math.random(2, BOARD_COLUMNS-1)
		y = math.random(2, BOARD_ROWS-1)
		done = true
		for i, v in ipairs(pellets) do
			if x == v.x and y == v.y then
				done = false
			end
		end
		for i, v in ipairs(snake) do
			if x == v.x and y == v.y then
				done = false
			end
		end
	end
	table.insert(pellets, {x=x,y=y})
end

function startGame()
	score = 0
	snakeLength = INITIAL_LENGTH
	direction = DIRECTION_SOUTH
	moveTimer = INITIAL_MOVETIMER
	pelletTimer = INITIAL_PELLETTIMER
	snake = {{x = math.floor(BOARD_COLUMNS/2), y=math.floor(BOARD_ROWS/2), pellet=false, flags=0}}
	inPlay = true
	pellets = {}
	addPellet()
	msg.post("/ui", "disable")
end

function showSnake()
	for i, v in ipairs(snake) do
		if v.x>=1 and v.x<=BOARD_COLUMNS and v.y>=1 and v.y<=BOARD_ROWS then
			if i==1 then
				tilemap.set_tile(BOARD_URL, SNAKE_LAYER, v.x, v.y, 32 + direction)
			elseif v.pellet then
				tilemap.set_tile(BOARD_URL, SNAKE_LAYER, v.x, v.y, v.flags + 17)
			else
				tilemap.set_tile(BOARD_URL, SNAKE_LAYER, v.x, v.y, v.flags + 1)
			end
		end
	end
end

function showPellets()
	for i, v in ipairs(pellets) do
		tilemap.set_tile(BOARD_URL, SNAKE_LAYER, v.x, v.y, 37)
	end
end

function showScore()
	local x = 1
	local temp = score
	while temp>9 do
		temp = math.floor(temp/10)
		x = x + 1
	end
	temp = score
	local first = true
	while first or temp>0 do
		first = false
		local digit = temp % 10
		tilemap.set_tile(BOARD_URL, STATS_LAYER, x, BOARD_ROWS, digit + 38)
		temp = math.floor(temp/10)
		x = x - 1
	end
end

function showPelletTimer()
	local x = 1
	local temp = math.ceil(pelletTimer)
	while temp>9 do
		temp = math.floor(temp/10)
		x = x + 1
	end
	temp = math.ceil(pelletTimer)
	local first = true
	while first or temp>0 do
		first = false
		local digit = temp % 10
		tilemap.set_tile(BOARD_URL, STATS_LAYER, x, 1, digit + 38)
		temp = math.floor(temp/10)
		x = x - 1
	end
end

function showHighScore()
	local x = BOARD_COLUMNS
	temp = highScore
	local first = true
	while first or temp>0 do
		first = false
		local digit = temp % 10
		tilemap.set_tile(BOARD_URL, STATS_LAYER, x, BOARD_ROWS, digit + 38)
		temp = math.floor(temp/10)
		x = x - 1
	end
end

function showStats()
	showScore()
	showHighScore()
	showPelletTimer()
end

function hasPellet(x,y)
	for i, v in ipairs(pellets) do
		if x==v.x and y==v.y then
			return true
		end
	end
	return false
end

function hasSnakeBody(x,y)
	for i, v in ipairs(snake) do
		if i>1 and x==v.x and y==v.y then
			return true
		end
	end
	return false
end

function removePellets(x,y)
	local purgeList = {}
	for i, v in ipairs(pellets) do
		if x==v.x and y==v.y then
			table.insert(purgeList,1,i)
		end
	end
	for i,v in ipairs(purgeList) do
		table.remove(pellets, v)
	end
end

function increaseScore()
	score = score + 1
	if score>highScore then
		highScore = score
	end
end

function processCommandQueue()
	if #commandQueue > 0 then
		local command = table.remove(commandQueue,1)
		if direction~=opposite[command] then
			sound.play(TURN_URL)
			direction = command
		end
	end
end

function doGameOver()
	sound.play(DEATH_URL)
	inPlay = false
	msg.post("/ui", "enable")
	msg.post("/ui#gameOver", "enable")
	msg.post("/ui#title", "disable")
end

function processMoveTimer(dt)
	moveTimer = moveTimer - dt
	if moveTimer<0 then
		moveTimer = moveTimer + INITIAL_MOVETIMER
		snake[1].flags = snake[1].flags+flags[direction]
		snake[1].direction = direction
		local nextSegment = {x = snake[1].x + deltaX[direction], y = snake[1].y+deltaY[direction], flags=flags[opposite[direction]], pellet=false}
		table.insert(snake, 1, nextSegment)
		if #snake > snakeLength then
			local endSegment = table.remove(snake)
			snake[#snake].flags = snake[#snake].flags - flags[opposite[endSegment.direction]]
		end
		if snake[1].x < 1 or snake[1].x>BOARD_COLUMNS or snake[1].y<1 or snake[1].y>BOARD_ROWS then
			doGameOver()
		elseif hasSnakeBody(snake[1].x,snake[1].y) then
			doGameOver()
		else
			if hasPellet(snake[1].x,snake[1].y) then
				sound.play(CHOMP_URL)
				pelletTimer = INITIAL_PELLETTIMER
				removePellets(snake[1].x,snake[1].y)
				snake[1].pellet = true
				snakeLength=snakeLength + 2
				if #pellets==0 then
					increaseScore()
					addPellet()
				end
			end
		end
	end
end

function processPelletTimer(dt)
	pelletTimer = pelletTimer - dt
	if pelletTimer < 0 then
		pelletTimer = pelletTimer + INITIAL_PELLETTIMER
		addPellet()
		addPellet()
		sound.play("#penalty")
	end
end

function updateSnake(dt)
	if inPlay then
		processCommandQueue()
		processMoveTimer(dt)
		processPelletTimer(dt)
	end
end

function updateStats(dt)
	if inPlay then
		
	end
end

function updateBoard()
	clearBoard()
	showSnake()
	showPellets()
	showStats()
end

function init(self)
	math.randomseed(os.time())
	msg.post(".","acquire_input_focus")
	sound.play(BGM_URL)
end

function update(self, dt)
	updateStats(dt)
	updateSnake(dt)
	updateBoard()
end

function toggleMute()
	sound.set_group_gain("master", 1-sound.get_group_gain("master"))
end

function on_input(self, action_id, action)
	if inPlay then
		if action_id == hash("up") and action.pressed then
			table.insert(commandQueue, DIRECTION_NORTH)
		elseif action_id == hash("down") and action.pressed  then
			table.insert(commandQueue, DIRECTION_SOUTH)
		elseif action_id == hash("left") and action.pressed then
			table.insert(commandQueue, DIRECTION_WEST)
		elseif action_id == hash("right") and action.pressed then
			table.insert(commandQueue, DIRECTION_EAST)
		elseif action_id == hash("mute") and action.pressed then
			toggleMute()
		end
	else
		if action_id == hash("green") then
			startGame()
		elseif action_id == hash("mute") and action.pressed then
			toggleMute()
		end
	end
end
